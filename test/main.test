#!/usr/bin/env bash

# shellcheck disable=SC1090
TESTING_BASH="${TESTING_BASH:-../testing.bash}"
source "$TESTING_BASH"

# ABS_TESTING_BASH is use from tests in arbitrary work dirs.
export ABS_TESTING_BASH="$PWD/$TESTING_BASH"

add_testing_bash() {
  helper && trap unhelper RETURN
  cp "$ABS_TESTING_BASH" ./;
}

make_test_file() { local NAME="$1" CONTENT="$2"
  helper && trap unhelper RETURN
  mkdir -p "$(dirname "$NAME")"
  printf "#!/usr/bin/env bash\n\nset -euo pipefail\n\n" > "$NAME"
  printf "source testing.bash\n\n" >> "$NAME"
  echo "$CONTENT" >> "$NAME"
  chmod +x "$NAME"
}

FLAGS=("-v" "-notime" "-run" ".")

# assert_tests_pass calls assert_tests_have_same_output and additionally asserts
# that the test file passes in both single and runner mode.
# Parameters: 1: Test file description; 2: Test file contents.
assert_tests_pass() {
  helper && trap unhelper RETURN
  assert_tests_have_same_output pass "$1" "$2"
}

# assert_tests_fail calls assert_tests_have_same_output and additionally asserts
# that the test file faild in both single and runner mode.
# Parameters: 1: Test file description; 2: Test file contents.
assert_tests_fail() {
  helper && trap unhelper RETURN
  assert_tests_have_same_output fail "$1" "$2"
}

# assert_tests_have_same_output creates a directory containing a test file,
# and a copy of the testing.bash. It then runs the test file both directly,
# and via ./testing.bash and compares the outputs and exit code. If there are
# any differences, then they are reported, and the test is failed.
# Note: we always turn on -v and -notime so we get verbose output without timing
# info, because timing info would make the comparisons too difficult as they are
# not predictable.
# Parameters: 1: want pass/fail; 2: Test file description; 3: Test file contents.
assert_tests_have_same_output() { local PASSFAIL="$1" WHAT="$2" BODY="$3"
  helper && trap unhelper RETURN
  add_testing_bash
  make_test_file "the.test" "$BODY"
  if run ./the.test "${FLAGS[@]}"; then
    [[ "$PASSFAIL" = pass ]] || error "$WHAT failed in single mode"
  else
    [[ "$PASSFAIL" = fail ]] || error "$WHAT succeeded when it should have failed in single mode"
  fi
  SINGLE_STDOUT_FILE="$STDOUT_FILE"
  SINGLE_STDERR_FILE="$STDERR_FILE"
  SINGLE_EXIT_CODE="$EXIT_CODE"
  if run ./testing.bash "${FLAGS[@]}"; then
    [[ "$PASSFAIL" = pass ]] || error "$WHAT failed in runner mode"
  else
    [[ "$PASSFAIL" = fail ]] || error "$WHAT succeeded when it should have failed in runner mode"
  fi
  RUNNER_STDOUT_FILE="$STDOUT_FILE"
  RUNNER_STDERR_FILE="$STDERR_FILE"
  RUNNER_EXIT_CODE="$EXIT_CODE"
  
  [[ "$SINGLE_EXIT_CODE" = "$RUNNER_EXIT_CODE" ]] || {
    error "exit codes different: single:$SINGLE_EXIT_CODE; runner:$RUNNER_EXIT_CODE"
  }
  diff "$SINGLE_STDOUT_FILE" "$RUNNER_STDOUT_FILE" || {
    error "stdout different for single vs runner mode, see diff above"
  }
  diff "$SINGLE_STDERR_FILE" "$RUNNER_STDERR_FILE" || {
    error "stdout different for single vs runner mode, see diff above"
  }
  if test_failed; then
    fatal "differences detected between runner and single mode"
  fi
}

assert_stdout_contains() {
  helper && trap unhelper RETURN
  [[ "$STDOUT" = *"$1"* ]] || error "stdout does not contain '$1'"
}
assert_stdout_not_contains() {
  helper && trap unhelper RETURN
  if [[ "$STDOUT" = *"$1"* ]]; then error "stdout contains '$1' but should not"; fi
}
assert_stderr_empty() {
  helper && trap unhelper RETURN
  [[ -z "$STDERR" ]] || error "stderr not empty, contains: '$STDERR'"
}
assert_stdout_empty() {
  # TODO: t.Helper so these logs get reported in the right place.
  helper && trap unhelper RETURN
  [[ -z "$STDOUT" ]] || error "stdout not empty, contains: '$STDOUT'"
}
assert_exit_code() {
  helper && trap unhelper RETURN
  [[ "$EXIT_CODE" = "$1" ]] || error "got exit code %s; want %s" "$EXIT_CODE" "$1"
}

Test/pass/empty() {
  assert_tests_pass "one empty test" "
    TestEmpty() { :; }
  "
  assert_stderr_empty
  assert_exit_code 0
}

Test/pass/true() {
  assert_tests_pass "one true test" "
    TestTrue() { true; }
  "
  assert_stderr_empty
  assert_exit_code 0
}

Test/pass/log() {
  assert_tests_pass "one log test" "
    TestLog() { log 'Hello World'; }
  "
  assert_stdout_contains "Hello World"
  assert_stderr_empty
  assert_exit_code 0
}

Test/pass/logformat() {
  assert_tests_pass "one formatted log test" "
    TestLog() { log '%s, cruel %s' Hello World; }
  "
  assert_stdout_contains "Hello, cruel World"
  assert_stderr_empty
  assert_exit_code 0
}

Test/fail/false() {
  assert_tests_fail "one false test" "
    TestFalse() { false; }
  "
  assert_stderr_empty
  assert_exit_code 1
}

Test/fail/exit1_from_test() {
  assert_tests_fail "exit 1" "
    TestExit1() { run exit 1; }
  "
  assert_stderr_empty
  assert_exit_code 1
}

# The exit code of the test does not affect the exit code of running the test file.
Test/fail/exit2_from_test() {
  assert_tests_fail "exit 2" "
    TestExit2() { run exit 2; }
  "
  assert_stderr_empty
  assert_exit_code 1 
}

# If we exit non-zero before the first test is defined, the exit code is preserved.
Test/fail/exit2_before_test() {
  assert_tests_fail "exit 2 before first test" "
    exit 2
    TestExit2() { :; }
  "
  assert_stderr_empty
  assert_exit_code 2
}

# If we exit non-zero after the first test is defined,
# the exit code reflects the test results, not the file exit.
Test/fail/exit2_after_test() {
  assert_tests_fail "exit 2 after first test" "
    TestExit2() { exit 0; }
    exit 2
  "
  assert_stderr_empty
  assert_exit_code 2
}

Test/fail/error() {
  assert_tests_fail "one error test" "
    TestError() {
      error 'this is an error'
      log 'but the test continues and fails'
    }
  "
  assert_stdout_contains "this is an error"
  assert_stdout_contains "but the test continues and fails"
  assert_stderr_empty
  assert_exit_code 1
}

Test/fail/errorformat() {
  assert_tests_fail "one error test" "
    TestError() {
      error 'this is a %s, %s error' formatted terrible
      log 'but the test continues and fails'
    }
  "
  assert_stdout_contains "this is a formatted, terrible error"
  assert_stdout_contains "but the test continues and fails"
  assert_stderr_empty
  assert_exit_code 1
}

Test/fail/fatal() {
  assert_tests_fail "one fatal test" "
    TestFatal() {
      fatal 'this is a fatal error';
      log 'you should never see this'
    }
  "
  assert_stdout_contains "this is a fatal error"
  assert_stdout_not_contains "you should never see this"
  assert_stderr_empty
  assert_exit_code 1
}

Test/fail/fatalformat() {
  assert_tests_fail "one fatal test" "
    TestFatal() {
      fatal 'this is a %s %s error' formatted fatal;
      log 'you should never see this'
    }
  "
  assert_stdout_contains "this is a formatted fatal error"
  assert_stdout_not_contains "you should never see this"
  assert_stderr_empty
  assert_exit_code 1
}
