#!/usr/bin/env bash

set -euo pipefail

# Use the -update flag to update the expected output from $FUNDAMENTAL_TEST_FILE
# $FUNDAMENTAL_TEST_FILE.expected is the golden file representing the expected output.
export UPDATE_EXPECTED=false
export FUNDAMENTAL_TEST_FILE=

# Flags
while [ ! $# -eq 0 ]; do
  case "$1" in
    -update)
      export UPDATE_EXPECTED=true ;;
    *)
      export FUNDAMENTAL_TEST_FILE="$1"
  esac
  shift
done

[[ -n "$FUNDAMENTAL_TEST_FILE" ]] || FUNDAMENTAL_TEST_FILE=simple.test

# WANT is a file containing the expected output.
export WANT="$PWD/$FUNDAMENTAL_TEST_FILE.expected"

# This fundamental test does not use testing.bash, but rather
# ensures that the file $FUNDAMENTAL_TEST_FILE produces the correct output.
#
# Given the truth of this, we can build up further tests using the
# testing.bash script itself.

export TESTDATA=".testdata/fundamental/$FUNDAMENTAL_TEST_FILE"
rm -rf "$TESTDATA"
export TEST_WORKDIR="$TESTDATA/work"
mkdir -p "$TEST_WORKDIR"

cp ../testing.bash "$TEST_WORKDIR/"
cp "$FUNDAMENTAL_TEST_FILE" "$TEST_WORKDIR/"

(
cd "$TEST_WORKDIR"
export GOT_SINGLE="GOT_SINGLE"
export GOT_ALL="GOT_ALL"

# Write the result of ./$FUNDAMENTAL_TEST_FILE to GOT_SINGLE.
# Use NOTIME=YES because timer output is unpredicable and we want to check
# for an exact output.
(
  # shellcheck disable=SC2030 disable=SC2031
  export VERBOSE=YES NOTIME=YES TESTING_BASH=testing.bash
  "./$FUNDAMENTAL_TEST_FILE" 2>&1 | tee "$GOT_SINGLE" | sed "s/^/$FUNDAMENTAL_TEST_FILE (single): /g" > /dev/stdout
) || true

# Write the result of ./testing.bash to GOT_ALL.
(
  # shellcheck disable=SC2030 disable=SC2031
  export VERBOSE=YES NOTIME=YES TESTING_BASH=testing.bash
  ./testing.bash "$FUNDAMENTAL_TEST_FILE" 2>&1 | tee "$GOT_ALL" | sed "s/^/$FUNDAMENTAL_TEST_FILE (runner): /g" > /dev/stdout
) || true

# Let's check our assumptions to be extra safe.
diff "$GOT_SINGLE" "$GOT_SINGLE" || {
  echo "    diff not behaving as expected! diff $GOT_SINGLE $GOT_SINGLE not empty!"
  exit 1
}
diff "$GOT_ALL" "$GOT_ALL" || {
  echo "    diff not behaving as expected! diff $GOT_ALL $GOT_ALL not empty!"
  exit 1
}
if ! $UPDATE_EXPECTED; then
diff "$WANT" "$WANT" || {
  echo "    diff not behaving as expected! diff $WANT $WANT not empty!"
  exit 1
}
fi

FAILED=NO

# If these files are different, then we have failed.
# Eyeball this failure, sometimes you'll need to update
# expectations in the WANT file above
echo "=== RUN   fundamental/single=all"
if ! diff "$GOT_SINGLE" "$GOT_ALL"; then
  echo "--- FAIL: fundamental/single=all"
  echo "    Diff not empty, see above."
  echo "    Got:"
  sed 's/^/    /g' < "$GOT_SINGLE"
  echo "    Want:"
  sed 's/^/    /g' < "$GOT_ALL"
  FAILED=YES
  # If we are trying to update expected, let's at least ensure we got the
  # same output both times.
  $UPDATE_EXPECTED && {
    echo "Failed to update $WANT: all and single had different outputs."
    exit 1
  }
else
  echo "--- PASS: fundamental/single=all"
  # OK, we got the same results, we are allowed to update expectations.
  $UPDATE_EXPECTED && {
    cp "$GOT_SINGLE" "$WANT"
  }
fi

echo "=== RUN   fundamental/single=want"
if ! diff "$GOT_SINGLE" "$WANT"; then
  echo "--- FAIL: fundamental/single=want"
  echo "    Diff not empty, see above."
  echo "    Got:"
  sed 's/^/    /g' < "$GOT_SINGLE"
  echo "    Want:"
  sed 's/^/    /g' < "$WANT"
  FAILED=YES
else
  echo "--- PASS: fundamental/single=want"
fi

echo "=== RUN   fundamental/all=want"
if ! diff "$GOT_ALL" "$WANT"; then
  echo "--- FAIL: fundamental/ALL"
  echo "    Diff not empty, see above."
  echo "    Got:"
  sed 's/^/    /g' < "$GOT_ALL"
  echo "    Want:"
  sed 's/^/    /g' < "$WANT"
  FAILED=YES
else
  echo "--- PASS: fundamental/all=want"
fi

[ $FAILED = NO ] || {
  echo "FAIL"
  echo "exit status 1"
  echo "FAIL      fundamental"
  exit 1
}
echo "PASS"
echo "ok        fundamental"
)
